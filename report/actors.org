#+TITLE:     actors.org
#+AUTHOR:    Tomas Herman
#+EMAIL:     tomasherman@Tomas-Hermans-MacBook.local
#+DATE:      2012-02-25 Sat
#+DESCRIPTION: 
#+KEYWORDS: 
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 

* Actor model
In this chapter, I will discuss why one should care about concurrency, I will take a look at conventional models of concurrent computations on Java Virtual Machine (JVM) and problems that goes along with them. Then I will talk about fundamental concepts of Actor model followed by more detailed description of Akka - my toolkit of choice for actor systems on JVM platform.
** The free lunch is over
"The free lunch is over" is an article written by Herb Sutter that appeared in Dr.Dobb's journal in 2005 [fn ::http://www.gotw.ca/publications/concurrency-ddj.htm]. He talks about the end of an era, in which software is getting faster (not more performant) simply by the fact that the hardware in getting faster. He argues, that while historically companies like AMD or Intel focused on increasing the clock speed of CPUs, it is no longer possible, due to physical limitations. So instead what these companies are doing in order to increase power of their products is adding more cores onto the chips. 
# jeste se mozna zminit o tom ze uz i mobily maj 4-jadra, a novy i7 od intelu maj dokonce 2 hardware thready na jadro, takze 8 hw threadu

That means, that in order to harness the power of this new hardware, we need to approach the craft of writing software in a different way. We need to focus on concurrency and we need to focus on creating tools that will help writing concurrent software easier.
** Problems with convetional models of concurrecny
Probably the most common concurrency entity used today in programming are threads. Concept of thread comes from operating systems and kind of leaks through into programming langue libraries. Thread allows us to execute concurrently with very little (programming) effort. For example all we need to do in Java programming language, is to create instance of class extending -java.lang.Thread- and implement the -public void run()- method. Threads are very convinient that way.

However, there are some very important drawbacks of doing concurrency this way.
*** Threads are expensive
Because of the way threads work, there is non-trivial ammount of work to be done when threade is created. A stack has to be allocated for every new thread (default size is 512kb on JVM) and a number of system calls needs to be made (JVM uses platform specific threads). Generally, creating new threads is considered expensive.

What this means, is that one shouldn't create threads dynamically, everytime a concurrent execution is required. Common aproach instead is creating a number of threads ahead of time and reusing them (this pattern is sometimes called thread pool). While this is reasonable option, this add a nontrivial complexity to the application and basically means that threads don't scale (we are limited by the number of threads in thread pool).
*** Thread based concurrency is hard
Threads can be used to a reasonable level of success in some programs. Especially programs that use threads for processing operations that don't need to communicate between each other nor share same resources(for example web servers, build tools etc). Threads then serve as sort of a cheaper processes.

However when dealing with shared resources and shared state, threads become really hard to use. Because threads share memory heap, it is very hard to keep data consistency and because threads can use all the resources on the heap, deadlocks can occur very easily and it is not a trivial exercise to eliminate all the bugs that can come from such model[fn::http://www.eecs.berkeley.edu/Pubs/TechRpts/2006/EECS-2006-1.pdf].
** Actor model overview
Actor model is a model of computation, designed to deal with problems in a highly concurrent, asynchronous and fault tolerant fashion. It was first published by Carl Hewitt in 1973 [fn:: Carl Hewitt; Peter Bishop and Richard Steiger (1973). A Universal Modular Actor Formalism for Artificial Intelligence. IJCAI.]. Actor model is widely used in systems where reliability, avalibility, scalability and concurrency are important features. Probably the most popular actor implementation today - the Erlang OTP framework, has been used in many software projects and services. Here is a few examples of Erlang applications:
 - nosql databases: CouchDB, Riak
 - message queues: RabbitMQ
 - web servers: YAWS
And as the number of cores per processors continue to increase, it is reasonable to expect that the demand for tools that promise easier handling of concurrency will increase aswell. 
** Fundamental concepts
In actor model, computation is processed using Actors. By Actor we mean an entity which can:
  - send asynchroneous messages to other actors (sender doesn't wait on reply from the receiver)
  - receive messages from other actors
  - create new actors
  - change it's behaviour dynamically

Every actor has an inbox, into which system queues messages sent to given actor. Actor processes messages one at a time. When thinking about actor, it helps to imagine it as a kind of lightweight thread (all actors in the system run at the same time), which is very cheap to maintain, create and destroy.

Computation is then split into series of operations that are executed by different actors. Results of those operations are then sent around via messages. It is important to note that there can be many instantions of given actor type. It is therefore important to deisgn system in such a way that actors don't affect each other (for example by holding locks). 

For example, let's say we want to create a service that writes logging data into a log file. We could easily create a function in every actor that opens a file, appends the log message and closes the file. That would be problematic, though, because multiple actors might want to write at the same time. We could use locks, to make sure that only 1 write is being issued at a time. However, that would be very inefficient, because esentially only 1 actor in the system would be allowed to run at a time, while other actors would wait for the resource to become avalible. What we could do instead, is make another actor (lets call it logger), that would hold the reference to our log file and everytime an actor would write into the log file, it would send the log message into the logger, which would handle the actual write. Please not that there is no need for locking with this approach. Even if two actors try to write at the same time, it only means that two messages are sent, and actor model guarantees that messages are processed sequentially and only 1 message is processed at a time.

This approach might look similar to object oriented programming, where we create a wrapper around a resource to encapsulate the details of the implementation (such as locking). But it's important to remember, that the messages in Actor model are asynchroneous. Which means that actor just sends the message and doesn't wait on response, it just keeps working.

Another important property of actors is that they are very cheap to create (In akka, overhead for creating an actor is only about 600 bytes). This allows system to generate actors when needed, for example, we could have a web server, that generates a new actor on demand for every incomming connection.
** Enter Akka
Every actor model implementation is different from others. For example, just for Scala programming languages there are 4 different implementations as far as i know (Lift actors, Scala Actors from standard library, Scalaz actors and Akka actors). I decided to use Akka actors, because they come as part of a great library and support remoting, which saved me a lot of work. Akka actors also support Erlang-like fault tolerance and -ask- kind of messaging, which is described below.
*** Actors
In Akka, actor can simply be created by extending Actor trait and implementing a receive method. In this method user maps different kind of messages to functions for processing given message. It's important to note, that Akka actors don't support any kind of scanning of the inbox (some implementations allow for for example checking the length of inbox etc.)

Inside every actor, a self variable is present, containing the important information about state of an actor. For example, one can obtain ActorRef(described below) to sender actor during message processing.

We can then instantiate the actor by calling the factory method actorOf. By calling this method, the user only get instance of class ActorRef. That intance represents the actor in the system, but does not contain the actor. This is so that the state of the actor can never be compromised, because user can never get reference to the actual actor. ActorRef supports methods ! (pronounced bang) and ? (pronounced ask).

The bang method represent a simple 'fire and forget' kind of messaging, while the ask method creates an Future object, which has hooks into which user can insert callback methods, which are called when the Future is completed. This approach eliminates the need of blocking and waiting until the receiving actor reads and responses to our message.

The ActorRef instance is completely thread safe, can be passed around in messages and can even be serialized and sent via network to different jvm and will still refer to the original actor.
*** Remoting
Akka also supports remote actors. Thanks to the propertis of ActorRef described above, one can run Akka systems in multiple JVMs and simply by sending ActorRefs around one is able to communicate with remote actors using the standart actor semantics (! and ? methods).

Akka actors can also be registered by string name in so called actor repository, from which one can withdraw them remotely. For example in Specus, there is an actor registered in the server under name that is know to nodes. What that means, is that when a node is booted up, it can get a reference to the registered server actor and being communication.
*** Fault tolerance
In order to achieve fault tolerance, a supervision scheme is implemented. Convetional programming methodology deals with error using 'defensive programming'. Basically, programmer is trying to check input data for all possible inconsistencies and only when all tests pass, data are allowed to be further processed.

On the other hand, Akka accepts the fact that no code is bug-less, so instead of trying to catch all the invalid cases, it encourages programmers to embrace the failure, and focus on recovery from failure. Every time an exception is thrown in Actor, it gets restarded. By that it's meant that the new, fresh instance of Actor is created and injected into system in such a manner that all the ActorRefs to the original actor are valid and point to the newly created actor. Actor can implement lifecycle methods like preRestart and postRestart in order to do save it's state and do anything that needs to be done. The message causing the failure is not processed again, however rest of the mailbox with unprcessed messages is reused for the new actor.

In addiotion to that, Actors can be asigned into tree-like structures where every node can have at most 1 supervisor and can supervise 0 or more actors. When actor is about to fail and is being restarted, a message is sent to the supervisor, so that it can decide what to do. It can decide whether he wants to restart just the failing actor, or all the actors he oversees (it can sometimes be useful).
